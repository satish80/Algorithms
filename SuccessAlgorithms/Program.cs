using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using static SuccessAlgorithms.Arrays;

namespace SuccessAlgorithms
{
    class Program
    {
        static void Main(string[] args)
        {
            Strings obj = new Strings();
            //obj.IsMetaString();
            //obj.LargestWordInDictionary();
            //obj.WordBoggle();
            // obj.LongestUniqueSubstring();
            // obj.RemoveInvalidParentheses();
            // obj.ClosestPalindrome();
            // obj.AnagramOfString();
            // obj.MinWindowSubstring();
            // obj.WildCardMatching();
            // obj.MinWindowSubstring2();
            // obj.MappedString();
            // obj.Ksimilarity();
            // obj.FindWords();
            // obj.AToI();
            // obj.IsRotatedString();
            // obj.ValidStringParanthesis();
            // obj.IsScramble();
            // obj.Indent();
            // obj.MinWindow();
            obj.RemoveOuterParentheses();

            Arrays arrObj = new Arrays();
            // arrObj.HasTripletSumZero();
            // arrObj.MaxSubArraySum();
            //arrObj.MaxRectangle();
            // arrObj.LongestValidParentheses();
            // arrObj.MinimumSwapToGroup1();
            // arrObj.MaxHeapify();
            // arrObj.MinStepsToReachEndofArray();
            // arrObj.FirstMissingPositive();
            // arrObj.BusRoutes();
            // arrObj.Anagram();
            // arrObj.CourseScheduling();
            // arrObj.MedianOfSortedArrays();
            // arrObj.RedundantConnection();
            // arrObj.MaximumSubArraySum();
            // arrObj.TrapWater();
            // arrObj.QuickSortIteratively();
            // arrObj.FindArrayBounds();
            // arrObj.SlidingWindow();
            // arrObj.SubArraySum();
            // arrObj.MinSubArrayWithGreaterVal();
            // arrObj.FindMissingnumber();
            // arrObj.PancakeSort();
            // arrObj.IsValidSudoKu();
            // arrObj.PreviousGreaterElement();
            // arrObj.JumpGame();
            // arrObj.RemoveDuplicateLetters();
            // arrObj.ReachDestinationInMatrix();
            // arrObj.MaxKNumbers();
            // arrObj.ValidateParanthesis();
            // arrObj.BackspaceCompare();
            // arrObj.NextGreater();
            // arrObj.MaxPairCombinations();
            // arrObj.FindMaxContinousSequence();
            // arrObj.CopyMatrixSpirallyToArray();
            // arrObj.WaysToReachDestInArray();
            // arrObj.LargestSubArrayWithEqual1And0();
            // arrObj.LongestIncreasingSubsequence();
            // arrObj.MergeIntervals();
            // arrObj.TripletSum();
            // arrObj.HouseRobber();
            // arrObj.CanReachEndOfArray();
            // arrObj.NextPermutation();
            //arrObj.MaxSubCycleArraySum();
            // arrObj.NextGreaterElement();
            // arrObj.RepeatedStringMatch();
            // arrObj.BuySell();
            // arrObj.SubsetDiff();
            // arrObj.BuySellStockOnce();
            // arrObj.DiffWaysToCompute();
            // arrObj.GetUniquePairs();
            // arrObj.ReOrder();
            // arrObj.IteratorCheck();
            // arrObj.FindRectangleWithzeros();
            // arrObj.MergeSortedArrays();
            // arrObj.MinflipsToMonotonicallyIncreasingSeq();
            // arrObj.SplitStringToFormPalindrome();
            // arrObj.CompressString();
            // arrObj.WordBreak();
            // arrObj.SearchInRotatedSortedArray();
            // arrObj.CanJump();
            // arrObj.FindKthLargest();
            // arrObj.MergeKsortedArrays();
            // arrObj.Combinations();
            // arrObj.DuplicateZeros();
            // arrObj.MountainArray();
            // arrObj.FirstUniqChar();
            // arrObj.TotalFruit();
            // arrObj.MaxProfit2Transactions();

            Recursion recObj = new Recursion();
            //recObj.StrategyGame();
            //recObj.PermutationUnderConstraints();
            // recObj.Combination();
            // recObj.TowerOfHanoi();
            // recObj.SortStack();
            // recObj.MinStepsToReachDest();
            // recObj.MinStepsToReachEnd();
            // recObj.MinCoinsNeeded();
            // recObj.NQueens();
            // recObj.PhoneDialPad();
            // recObj.CoinChange();
            // recObj.ReachNumber();
            // recObj.Encode();
            // recObj.FindPositionInSortedArr();
            // recObj.Combinations();
            // recObj.PartitionArrayWithSameSum();
            // recObj.SurroundRegions();
            // recObj.PhoneDialpad();
            // recObj.DiffWaysToCompute();
            //recObj.ParseString();
            // recObj.CanBreakStrings();

            Tree treeObj = new Tree();
            // treeObj.ConnectNodesAtSameLevel();
            // treeObj.BSTNodesWithinRange();
            // treeObj.SumTree();
            // treeObj.Siblings();
            // treeObj.FindLCA();
            // treeObj.RootToLeafPath();
            // treeObj.ConstructPreOrderTree();
            // treeObj.DiffOddAndEven();
            // treeObj.Serialize();
            // treeObj.PostOrder();
            // treeObj.BSTMedian();
            // treeObj.HasDuplicateNodes();
            // treeObj.Inorder();
            // treeObj.MaxPath();
            // treeObj.RecoverBST();
            // treeObj.SmallerNosThanSelf();
            // treeObj.CousinNode();
            // treeObj.PreOrderSuccessor();
            // treeObj.RecoverBinarySearchTree();
            // treeObj.FlattenTree();
            // treeObj.LeftTree();
            // treeObj.MirrorTree();
            // treeObj.TrimTree();
            // treeObj.DeleteBSTNode();
            // treeObj.CorrectBST();
            // treeObj.CloserBSTValue();
            // treeObj.PostOrderIteratively();
            // treeObj.ArrayToBST();
            // treeObj.CountInversions();
            // treeObj.ConstructBinaryTreeFromPreOrder();
            // treeObj.ConstructTreeFromSortedArray();
            // treeObj.CountCombinationsOfTree();
            // treeObj.DeSerialize();
            // treeObj.IterativePreOrder();
            // treeObj.DeepestNode();
            // treeObj.IsValidBST();
            // treeObj.PathSum();
            // treeObj.RootPathSum();
            // treeObj.HasDuplicateSubTree();
            // treeObj.Boundary();
            /// treeObj.ConstructExpressionTree();
            // treeObj.KthSmallestInBST();
            // treeObj.InorderSuccessor();
            // treeObj.PruneTree();
            // treeObj.IterativePreOrderTraversal();
            // treeObj.RightSideView();
            // treeObj.MinDepth();
            // treeObj.BinaryTreeCamera();
            // treeObj.FullTree();
            // treeObj.TernaryTree();
            // treeObj.DiameterOfTree();
            // treeObj.bstFromPreorder();
            // treeObj.PrintBSTIterator();
            // treeObj.SerializeNAryTree();
            // treeObj.PostOrderIteratively();
            // treeObj.SubtreeWithAllDeepest();
            // treeObj.FindLCA();
            // treeObj.SumOfRangeInBST();
            // treeObj.FlattenBST();
            // treeObj.IsSymmetric();
            // treeObj.ConstructTreeFromInorderPreOrder();
            // treeObj.DeleteTeeeNodeGreaterThan();
            // treeObj.DeleteTeeeNodeGreaterThan();
            // treeObj.DistanceK();
            // treeObj.MaxPathSum();
            // treeObj.PostOrderTraversal();
            // treeObj.MaxAncestorDiff();


            DP dpObj = new DP();
            // dpObj.FindSubArraySum();
            // dpObj.SubArraySum();
            // dpObj.BooleanParanthesization();
            // dpObj.LCS();
            // dpObj.DistinctSubsequences();
            // dpObj.LongestPalindromicSubSequence();
            // dpObj.BuySellStocks();
            // dpObj.TotalUniqueWays();
            // dpObj.CourseSchedule();
            // dpObj.CheryPickup();
            // dpObj.CoinChange();
            // dpObj.DecodeWays();
            // dpObj.SubsetSum();
            // dpObj.WordBreak();
            // dpObj.SubSequence();
            // dpObj.CreDecodeWays();
            // dpObj.KPalindrome();
            // dpObj.LongestIncreasingPathInArray();

            Stacks stkObj = new Stacks();
            // stkObj.LongestValidParanthesis();
            // stkObj.RemoveInvalidParanthesis();
            //stkObj.ReverseStackUsingRecursion();
            // stkObj.QueueUsingStack();
            // stkObj.NextGreaterNumber();
            // stkObj.InterleaveStacks();
            // stkObj.MaxFrequencyStack();

            Graph graphObj = new Graph();
            // graphObj.DFSTraverse();
            // graphObj.BFS();
            // graphObj.IsCyclic();
            // graphObj.IsUnDirectedCyclic();
            // graphObj.TopologicalSort();
            // graphObj.AlienDictionary();
            // graphObj.ReverseGraph();
            // graphObj.MotherVertex();
            // graphObj.PointsOnALine();
            //graphObj.Itinerary();
            // graphObj.FindAttendeesInParty();

            BFS bfsObj = new BFS();
            // bfsObj.WaterJug();
            // bfsObj.CreWordSearch();
            // bfsObj.FindCherry();
            // bfsObj.ReachingPoints();
            // bfsObj.MeetingRooms();
            // bfsObj.FindIslands();
            // bfsObj.WordExist();

            LinkedList linkedListObj = new LinkedList();
            //linkedListObj.CloneWithRandomPointers();
            // linkedListObj.Palindrome();
            // inkedListObj.MergeKList();
            // linkedListObj.ReorderList();
            // linkedListObj.ReverseList();
            // linkedListObj.RotateList();
            // linkedListObj.SwapAlternateNodes();
            // linkedListObj.AddLinkedLists();

            //RandomizedSet set = new RandomizedSet();
            //set.Insert(0);
            //set.Insert(1);
            //set.Remove(0);
            //set.Insert(2);
            //set.Remove(1);
            //set.GetRandom();

            Console.Read();
        }
    }
}
